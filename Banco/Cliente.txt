create table tb_cliente(
id integer not null primary key,
rg varchar(14),
cpf varchar(14),
datanascimento int,
email varchar(40),
foto bytea,
telefone varchar(10),
celular01 varchar(11),
celular02 varchar(11),
celular03 varchar(11),
datainicio int,
--datafim date,
rua varchar(100),
referencia varchar(100),
latitude double precision,
longitude double precision,
cep varchar(9),
id_bairro integer default 0 references tb_bairro(id) on update cascade on delete restrict,
id_sexo integer references tb_auxiliar(id) on update cascade on delete restrict,
-- id_empresa integer not null references tb_empresa(id) on update cascade on delete restrict,
nome varchar(100)
);




CREATE SEQUENCE public.sq_cliente
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9999999
  START 1
  CACHE 1
  CYCLE;
ALTER TABLE public.sq_cliente
  OWNER TO postgres;
COMMENT ON SEQUENCE public.sq_cliente
  IS 'Sequence utilizada na tabelas de clientes';


CREATE OR REPLACE FUNCTION public.trg_fc_cliente()
  RETURNS trigger AS
$BODY$ 

begin
	if (TG_OP = 'INSERT') and  (coalesce(NEW.id,0) = 0) then 
		select nextval('sq_cliente')
		  into NEW.id;
	end if;
	return NEW;
end; 
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.trg_fc_cliente()
  OWNER TO postgres;
COMMENT ON FUNCTION public.trg_fc_cliente() IS 'Criar o id no momento do insert,  caso não tenha sido informado.';


CREATE TRIGGER trg_cliente
  BEFORE INSERT
  ON public.tb_cliente
  FOR EACH ROW
  EXECUTE PROCEDURE public.trg_fc_cliente();
COMMENT ON TRIGGER trg_cliente ON public.tb_cliente IS 'Gerar o id quando for nulo';
